#include "serial.h"
#include "iostream"

using namespace std;

Serial::Serial(char *portName)
{
    //We're not yet connected
    connected = false;

    //Try to connect to the given port throuh CreateFile
    this->hSerial = CreateFileA(portName,
            GENERIC_READ | GENERIC_WRITE,
            0,
            NULL,
            OPEN_EXISTING,
            FILE_ATTRIBUTE_NORMAL,
            NULL);

    //Check if the connection was successfull
    if(this->hSerial==INVALID_HANDLE_VALUE)
    {
        //If not success full display an Error
        if(GetLastError()==ERROR_FILE_NOT_FOUND){

            //Print Error if neccessary
            printf("ERROR: Handle was not attached. Reason: %s not available.\n", portName);

        }
        else
        {
            printf("ERROR!!!");
        }
    }
    else
    {
        //If connected we try to set the comm parameters
        DCB dcbSerialParams = {0};

        //Try to get the current
        if (!GetCommState(this->hSerial, &dcbSerialParams))
        {
            //If impossible, show an error
            printf("failed to get current serial parameters!");
        }
        else
        {
            //Define serial connection parameters for the arduino board
            dcbSerialParams.BaudRate=CBR_9600;
            dcbSerialParams.ByteSize=8;
            dcbSerialParams.StopBits=ONESTOPBIT;
            dcbSerialParams.Parity=NOPARITY;

             //Set the parameters and check for their proper application
             if(!SetCommState(hSerial, &dcbSerialParams))
             {
                printf("ALERT: Could not set Serial Port parameters");
             }
             else
             {
                 //If everything went fine we're connected
                 this->connected = true;
                 //We wait 2s as the arduino board will be reseting
                 Sleep(ARDUINO_WAIT_TIME);
             }
        }
    }

}

Serial::~Serial()
{
    //Check if we are connected before trying to disconnect
    if(this->connected)
    {
        //We're no longer connected
        this->connected = false;
        //Close the serial handler
        CloseHandle(this->hSerial);
    }
}

int Serial::ReadData(char *buffer, unsigned int nbChar)
{
    //Number of bytes we'll have read
    DWORD bytesRead;
    //Number of bytes we'll really ask to read
    unsigned int toRead;

    //Use the ClearCommError function to get status info on the Serial port
    ClearCommError(this->hSerial, &this->errors, &this->status);

    //Check if there is something to read
    if(this->status.cbInQue>0)
    {
        //If there is we check if there is enough data to read the required number
        //of characters, if not we'll read only the available characters to prevent
        //locking of the application.
        if(this->status.cbInQue>nbChar)
        {
            toRead = nbChar;
        }
        else
        {
            toRead = this->status.cbInQue;
        }

        //Try to read the require number of chars, and return the number of read bytes on success
        if(ReadFile(this->hSerial, buffer, toRead, &bytesRead, NULL) && bytesRead != 0)
        {
            return bytesRead;
        }

    }

    //If nothing has been read, or that an error was detected return -1
    return -1;

}

void Serial::sendApi(int carro, bool sentido1, int velocidade1, bool sentido2, int velocidade2)
{
	byte sum = 0;
	char msg[12];

	switch (carro)
	{
		case 0:
			msg[5] = 0xAA;
			msg[6] = 0xAA;
			break;
		case 1:
			msg[5] = 0xAB;
			msg[6] = 0xAB;
			break;
		case 2:
			msg[5] = 0xAC;
			msg[6] = 0xAC;
			break;
	}
	
	if (sentido1 == 1 && sentido2 == 1)
	{
		msg[8] = 0xFF;
	}
	else if (sentido1 == 1 && sentido2 == 0)
	{
		msg[8] = 0xF0;
	}
	else if (sentido1 == 0 && sentido2 == 1)
	{
		msg[8] = 0x0F;
	}
	else if (sentido1 == 0 && sentido2 == 0)
	{
		msg[8] = 0x00;
	}

	msg[0] = 0x7E;
	msg[1] = 0x00;
	msg[2] = 0x08;
	msg[3] = 0x01;
	msg[4] = 0x01;
	//msg[5] = 0xFA;
	//msg[6] = 0xFA;
	msg[7] = 0x01;
	//msg[8] = 0xFF;
	//msg[9] = 0xFF;
	//msg[10] = 0xFF;
	msg[9] = velocidade1;
	msg[10] = velocidade2;
	
	for (int i = 0; i < 12; i++)
	{
		if (i>2 && i < 11)
		{
			sum = sum + msg[i];
		}
	}
	sum = 0xFF - sum;
	sum = 0xFF & sum;
	msg[11] = sum;
	WriteData(msg, 12);
}


bool Serial::WriteData(char *buffer, unsigned int nbChar)
{
    DWORD bytesSend;

    //Try to write the buffer on the Serial port
    if(!WriteFile(this->hSerial, (void *)buffer, nbChar, &bytesSend, 0))
	{
        //In case it don't work get comm error and return false
        ClearCommError(this->hSerial, &this->errors, &this->status);

        return false;
    }
	else
	{
		return true;
	}
}

bool Serial::IsConnected()
{
    //Simply return the connection status
    return this->connected;
}


/* //SEND ORIGINAL
void Serial::send(int id, int v_e, int v_d)
{
	int msg_e, msg_d;
		
	if (v_e > 0)
	{
		msg_e = (id*64) + (1 * 32) + v_e;
	}

	else
	{
		msg_e = (id*64) + (1 * 32) + (1 * 16) + abs(v_e);
	}
	
	if (v_d > 0)
	{
		msg_d = (id*64) + abs(v_d);
	}
	else
	{
		msg_d = (id*64) + (1 * 16) + abs(v_d);
	}

	char temp[2];
	temp[0] = msg_e;
	temp[1] = msg_d;
	
	//WriteData((char*)msg_e,2);
	//WriteData((char*)msg_d,2);
	WriteData(temp,2);
	
}*/


void Serial::send(int v_e, int v_d)
{
 	int msg_e, msg_d;

	if (v_e > 0)
	{
		msg_e = v_e*2;
	}

	else
	{
		msg_e = (128) + abs(v_e*2);
	}

	if (v_d > 0)
	{
		msg_d = abs(v_d*2);
	}
	else
	{
		msg_d = (128) + abs(v_d*2);
	}

	char temp[2];
	temp[0] = msg_e;
	temp[1] = msg_d;

	printf(temp);

	//WriteData((char*)msg_e,2);
	//WriteData((char*)msg_d,2);
	WriteData(temp, 2);


}